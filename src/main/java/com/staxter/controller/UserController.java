package com.staxter.controller;

import com.staxter.model.api.CodeDescriptionResponseModel;
import com.staxter.model.api.user.RegisterUserRequestModel;
import com.staxter.model.api.user.RegisterUserResponseModel;
import com.staxter.model.api.user.LoginUserRequestModel;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

/**
 * Provides endpoints for user registration and login.
 * <p>
 * The routes
 * - /userservice/register
 * - /userservice/login
 * <p>
 * are the only routes eligible for unauthorized access.
 * To access the rest of the API the third-party should provide a token obtained from "Authorization" header
 * as a response to successful login.
 */
@RequestMapping("/userservice")
public interface UserController {

    /**
     * Creates a new user and returns the JSON response with the information about the user.
     * <p>
     * {
     * "id": "Id generated by the back-end",
     * "firstName": "Some first name",
     * "lastName": "The last name",
     * "userName": "The user name"
     * }
     * <p>
     * In case the user already exists, returns the error message in corresponding format.
     * {
     * "code": "{@link com.staxter.util.ResponseCode#USER_ALREADY_EXISTS}",
     * "description": "{@link com.staxter.util.ResponseCode#USER_ALREADY_EXISTS_DESCRIPTION}"
     * }
     * <p>
     * Returns
     * <p>
     * {
     * "code": "{@link com.staxter.util.ResponseCode#USER_CANNOT_BE_CREATED}",
     * "description": {@link com.staxter.util.ResponseCode#USER_CANNOT_BE_CREATED_DESCRIPTION}
     * }
     * <p>
     * if the user cannot be created because of the other reasons.
     *
     * @param user information about the user, which comes with the request
     * @return response entity with information about the created user
     * @see com.staxter.model.api.CodeDescriptionResponseModel
     * @see com.staxter.model.api.user.RegisterUserRequestModel
     * @see com.staxter.model.api.user.RegisterUserResponseModel
     * @see com.staxter.util.ResponseCode
     */
    @PostMapping("/register")
    ResponseEntity<RegisterUserResponseModel> register(@RequestBody RegisterUserRequestModel user);

    /**
     * Logs the user in.
     * <p>
     * If the user has logged in successfully, returns
     * <p>
     * {
     * "code": {@link com.staxter.util.ResponseCode#USER_LOGGED_IN_SUCCESSFULLY},
     * "description": {@link com.staxter.util.ResponseCode#USER_LOGGED_IN_SUCCESSFULLY_DESCRIPTION}
     * }
     * <p>
     * <p>
     * If the credentials were not recognized, returns
     * <p>
     * {
     * "code": "{@link com.staxter.util.ResponseCode#BAD_CREDENTIALS}",
     * "description": {@link com.staxter.util.ResponseCode#BAD_CREDENTIALS_DESCRIPTION}
     * }
     * <p>
     *
     * @param user The user's credentials to log in
     * @return Response with the login status
     * @see com.staxter.model.api.CodeDescriptionResponseModel
     * @see com.staxter.model.api.user.LoginUserRequestModel
     * @see com.staxter.util.ResponseCode
     */
    @PostMapping(value = "/login")
    ResponseEntity<CodeDescriptionResponseModel> login(@RequestBody LoginUserRequestModel user);
}
